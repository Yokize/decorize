"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference types="reflect-metadata" />
var isObject_1 = __importDefault(require("lodash/isObject"));
var hasOwnMetadata_1 = require("./hasOwnMetadata");
var get_1 = require("./fallback/get");
/* istanbul ignore next */
var builtInReflect = Reflect === null || Reflect === void 0 ? void 0 : Reflect.getOwnMetadata;
/**
 * Reflect retrieves metadata by key from map related to the object or property.
 * Fallback get metadata from private storage defined directly at the object.
 * Fallback approach have limitation to get metadata from non-object target.
 */
var _getOwnMetadata = builtInReflect !== null && builtInReflect !== void 0 ? builtInReflect : function getOwnMetadataFk(key, target, property) {
    return isObject_1.default(target)
        ? hasOwnMetadata_1.hasOwnMetadata(key, target, property)
            ? get_1.getFromStorage(key, target, property)
            : undefined
        : undefined;
};
function getOwnMetadata(key, target, property) {
    return _getOwnMetadata(key, target, property);
}
exports.getOwnMetadata = getOwnMetadata;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0T3duTWV0YWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcmVmbGVjdC9nZXRPd25NZXRhZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDBDQUEwQztBQUMxQyw2REFBdUM7QUFDdkMsbURBQWtEO0FBQ2xELHNDQUFnRDtBQUVoRCwwQkFBMEI7QUFDMUIsSUFBTSxjQUFjLEdBQVEsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLGNBQWMsQ0FBQztBQUVwRDs7OztHQUlHO0FBQ0gsSUFBTSxlQUFlLEdBQ25CLGNBQWMsYUFBZCxjQUFjLGNBQWQsY0FBYyxHQUNkLFNBQVMsZ0JBQWdCLENBQUMsR0FBUSxFQUFFLE1BQWMsRUFBRSxRQUFzQjtJQUN4RSxPQUFPLGtCQUFRLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUMsQ0FBQywrQkFBYyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxvQkFBYyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDO1lBQ3ZDLENBQUMsQ0FBQyxTQUFTO1FBQ2IsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUNoQixDQUFDLENBQUM7QUFvQkosU0FBZ0IsY0FBYyxDQUFDLEdBQVEsRUFBRSxNQUFjLEVBQUUsUUFBc0I7SUFDN0UsT0FBTyxlQUFlLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRkQsd0NBRUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cInJlZmxlY3QtbWV0YWRhdGFcIiAvPlxuaW1wb3J0IGlzT2JqZWN0IGZyb20gJ2xvZGFzaC9pc09iamVjdCc7XG5pbXBvcnQgeyBoYXNPd25NZXRhZGF0YSB9IGZyb20gJy4vaGFzT3duTWV0YWRhdGEnO1xuaW1wb3J0IHsgZ2V0RnJvbVN0b3JhZ2UgfSBmcm9tICcuL2ZhbGxiYWNrL2dldCc7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5jb25zdCBidWlsdEluUmVmbGVjdDogYW55ID0gUmVmbGVjdD8uZ2V0T3duTWV0YWRhdGE7XG5cbi8qKlxuICogUmVmbGVjdCByZXRyaWV2ZXMgbWV0YWRhdGEgYnkga2V5IGZyb20gbWFwIHJlbGF0ZWQgdG8gdGhlIG9iamVjdCBvciBwcm9wZXJ0eS5cbiAqIEZhbGxiYWNrIGdldCBtZXRhZGF0YSBmcm9tIHByaXZhdGUgc3RvcmFnZSBkZWZpbmVkIGRpcmVjdGx5IGF0IHRoZSBvYmplY3QuXG4gKiBGYWxsYmFjayBhcHByb2FjaCBoYXZlIGxpbWl0YXRpb24gdG8gZ2V0IG1ldGFkYXRhIGZyb20gbm9uLW9iamVjdCB0YXJnZXQuXG4gKi9cbmNvbnN0IF9nZXRPd25NZXRhZGF0YTogKGtleTogYW55LCB0YXJnZXQ6IG9iamVjdCwgcHJvcGVydHk/OiBQcm9wZXJ0eUtleSkgPT4gYW55IHwgdW5kZWZpbmVkID1cbiAgYnVpbHRJblJlZmxlY3QgPz9cbiAgZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGFGayhrZXk6IGFueSwgdGFyZ2V0OiBvYmplY3QsIHByb3BlcnR5PzogUHJvcGVydHlLZXkpOiBhbnkgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICA/IGhhc093bk1ldGFkYXRhKGtleSwgdGFyZ2V0LCBwcm9wZXJ0eSlcbiAgICAgICAgPyBnZXRGcm9tU3RvcmFnZShrZXksIHRhcmdldCwgcHJvcGVydHkpXG4gICAgICAgIDogdW5kZWZpbmVkXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgfTtcblxuLyoqXG4gKiBHZXQgdGhlIG1ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCBvYmplY3QuXG4gKlxuICogQHBhcmFtIGtleSBLZXkgdXNlZCB0byByZXRyaWV2ZSBtZXRhZGF0YS5cbiAqIEBwYXJhbSB0YXJnZXQgT2JqZWN0IGFzc29jaWF0ZWQgd2l0aCBtZXRhZGF0YS5cbiAqIEByZXR1cm4gTWV0YWRhdGEgZm9yIHRoZSBrZXkgd2hlbiBmb3VuZDsgdW5kZWZpbmVkIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKGtleTogYW55LCB0YXJnZXQ6IG9iamVjdCk6IGFueTtcblxuLyoqXG4gKiBHZXQgdGhlIG1ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ga2V5IEtleSB1c2VkIHRvIHJldHJpZXZlIG1ldGFkYXRhLlxuICogQHBhcmFtIHRhcmdldCBPYmplY3Qgd2hpY2ggY29udGFpbnMgcHJvcGVydHkuXG4gKiBAcGFyYW0gcHJvcGVydHkgUHJvcGVydHkgYXNzb2NpYXRlZCB3aXRoIG1ldGFkYXRhLlxuICogQHJldHVybiBNZXRhZGF0YSBmb3IgdGhlIGtleSB3aGVuIGZvdW5kOyB1bmRlZmluZWQgb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEoa2V5OiBhbnksIHRhcmdldDogb2JqZWN0LCBwcm9wZXJ0eTogUHJvcGVydHlLZXkpOiBhbnk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEoa2V5OiBhbnksIHRhcmdldDogb2JqZWN0LCBwcm9wZXJ0eT86IFByb3BlcnR5S2V5KTogYW55IHtcbiAgcmV0dXJuIF9nZXRPd25NZXRhZGF0YShrZXksIHRhcmdldCwgcHJvcGVydHkpO1xufVxuIl19