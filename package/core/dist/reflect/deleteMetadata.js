"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference types="reflect-metadata" />
var isObject_1 = __importDefault(require("lodash/isObject"));
var hasOwnMetadata_1 = require("./hasOwnMetadata");
var delete_1 = require("./fallback/delete");
/* istanbul ignore next */
var builtInReflect = Reflect === null || Reflect === void 0 ? void 0 : Reflect.deleteMetadata;
/**
 * Reflect and Fallback removes corresponding metadata by specified key and return
 * status whether metadata have been found and successfully removed. Reflect removes
 * metadata from map defined for an object or property. Fallback removes metadata
 * from the storage defined on the object. Fallback approach have limitation to
 * delete metadata from non-object target.
 */
var _deleteMetadata = builtInReflect !== null && builtInReflect !== void 0 ? builtInReflect : function deleteMetadataFk(key, target, property) {
    // Verify whether target is object.
    if (isObject_1.default(target))
        // Delete metadata associated with target or property.
        return hasOwnMetadata_1.hasOwnMetadata(key, target, property) ? delete_1.deleteFromStorage(key, target, property) : false;
    else
        throw new TypeError('Metadata can be deleted only from the object');
};
function deleteMetadata(key, target, property) {
    return _deleteMetadata(key, target, property);
}
exports.deleteMetadata = deleteMetadata;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZXRlTWV0YWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcmVmbGVjdC9kZWxldGVNZXRhZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDBDQUEwQztBQUMxQyw2REFBdUM7QUFDdkMsbURBQWtEO0FBQ2xELDRDQUFzRDtBQUV0RCwwQkFBMEI7QUFDMUIsSUFBTSxjQUFjLEdBQVEsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLGNBQWMsQ0FBQztBQUVwRDs7Ozs7O0dBTUc7QUFDSCxJQUFNLGVBQWUsR0FDbkIsY0FBYyxhQUFkLGNBQWMsY0FBZCxjQUFjLEdBQ2QsU0FBUyxnQkFBZ0IsQ0FBQyxHQUFRLEVBQUUsTUFBYyxFQUFFLFFBQXNCO0lBQ3hFLG1DQUFtQztJQUNuQyxJQUFJLGtCQUFRLENBQUMsTUFBTSxDQUFDO1FBQ2xCLHNEQUFzRDtRQUN0RCxPQUFPLCtCQUFjLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsMEJBQWlCLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDOztRQUM3RixNQUFNLElBQUksU0FBUyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7QUFDM0UsQ0FBQyxDQUFDO0FBc0JKLFNBQWdCLGNBQWMsQ0FBQyxHQUFRLEVBQUUsTUFBYyxFQUFFLFFBQXNCO0lBQzdFLE9BQU8sZUFBZSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDaEQsQ0FBQztBQUZELHdDQUVDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJyZWZsZWN0LW1ldGFkYXRhXCIgLz5cbmltcG9ydCBpc09iamVjdCBmcm9tICdsb2Rhc2gvaXNPYmplY3QnO1xuaW1wb3J0IHsgaGFzT3duTWV0YWRhdGEgfSBmcm9tICcuL2hhc093bk1ldGFkYXRhJztcbmltcG9ydCB7IGRlbGV0ZUZyb21TdG9yYWdlIH0gZnJvbSAnLi9mYWxsYmFjay9kZWxldGUnO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuY29uc3QgYnVpbHRJblJlZmxlY3Q6IGFueSA9IFJlZmxlY3Q/LmRlbGV0ZU1ldGFkYXRhO1xuXG4vKipcbiAqIFJlZmxlY3QgYW5kIEZhbGxiYWNrIHJlbW92ZXMgY29ycmVzcG9uZGluZyBtZXRhZGF0YSBieSBzcGVjaWZpZWQga2V5IGFuZCByZXR1cm5cbiAqIHN0YXR1cyB3aGV0aGVyIG1ldGFkYXRhIGhhdmUgYmVlbiBmb3VuZCBhbmQgc3VjY2Vzc2Z1bGx5IHJlbW92ZWQuIFJlZmxlY3QgcmVtb3Zlc1xuICogbWV0YWRhdGEgZnJvbSBtYXAgZGVmaW5lZCBmb3IgYW4gb2JqZWN0IG9yIHByb3BlcnR5LiBGYWxsYmFjayByZW1vdmVzIG1ldGFkYXRhXG4gKiBmcm9tIHRoZSBzdG9yYWdlIGRlZmluZWQgb24gdGhlIG9iamVjdC4gRmFsbGJhY2sgYXBwcm9hY2ggaGF2ZSBsaW1pdGF0aW9uIHRvXG4gKiBkZWxldGUgbWV0YWRhdGEgZnJvbSBub24tb2JqZWN0IHRhcmdldC5cbiAqL1xuY29uc3QgX2RlbGV0ZU1ldGFkYXRhOiAoa2V5OiBhbnksIHRhcmdldDogb2JqZWN0LCBwcm9wZXJ0eT86IFByb3BlcnR5S2V5KSA9PiBib29sZWFuID1cbiAgYnVpbHRJblJlZmxlY3QgPz9cbiAgZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGFGayhrZXk6IGFueSwgdGFyZ2V0OiBvYmplY3QsIHByb3BlcnR5PzogUHJvcGVydHlLZXkpOiBib29sZWFuIHtcbiAgICAvLyBWZXJpZnkgd2hldGhlciB0YXJnZXQgaXMgb2JqZWN0LlxuICAgIGlmIChpc09iamVjdCh0YXJnZXQpKVxuICAgICAgLy8gRGVsZXRlIG1ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCB0YXJnZXQgb3IgcHJvcGVydHkuXG4gICAgICByZXR1cm4gaGFzT3duTWV0YWRhdGEoa2V5LCB0YXJnZXQsIHByb3BlcnR5KSA/IGRlbGV0ZUZyb21TdG9yYWdlKGtleSwgdGFyZ2V0LCBwcm9wZXJ0eSkgOiBmYWxzZTtcbiAgICBlbHNlIHRocm93IG5ldyBUeXBlRXJyb3IoJ01ldGFkYXRhIGNhbiBiZSBkZWxldGVkIG9ubHkgZnJvbSB0aGUgb2JqZWN0Jyk7XG4gIH07XG5cbi8qKlxuICogRGVsZXRlIHRoZSBtZXRhZGF0YSBhc3NvY2lhdGVkIHdpdGggb2JqZWN0LlxuICpcbiAqIEBwYXJhbSBrZXkgS2V5IHVzZWQgdG8gZmluZCBhbmQgcmVtb3ZlIG1ldGFkYXRhLlxuICogQHBhcmFtIHRhcmdldCBPYmplY3QgYXNzb2NpYXRlZCB3aXRoIG1ldGFkYXRhLlxuICogQHJldHVybiBUcnVlIGluIGNhc2UgdGhlIG1ldGFkYXRhIGhhcyBiZWVuIGZvdW5kIGFuZCBkZWxldGVkOyBmYWxzZSBvdGhlcndpc2UuXG4gKiBAdGhyb3dzIFR5cGVFcnJvciBpbiBjYXNlIG9mIG5vbi1vYmplY3QgdGFyZ2V0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEoa2V5OiBhbnksIHRhcmdldDogb2JqZWN0KTogYm9vbGVhbjtcblxuLyoqXG4gKiBEZWxldGUgdGhlIG1ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ga2V5IEtleSB1c2VkIHRvIGZpbmQgYW5kIHJlbW92ZSBtZXRhZGF0YS5cbiAqIEBwYXJhbSB0YXJnZXQgT2JqZWN0IHdoaWNoIGNvbnRhaW5zIHByb3BlcnR5LlxuICogQHBhcmFtIHByb3BlcnR5IFByb3BlcnR5IGFzc29jaWF0ZWQgd2l0aCBtZXRhZGF0YS5cbiAqIEByZXR1cm4gVHJ1ZSBpbiBjYXNlIHRoZSBtZXRhZGF0YSBoYXMgYmVlbiBmb3VuZCBhbmQgZGVsZXRlZDsgZmFsc2Ugb3RoZXJ3aXNlLlxuICogQHRocm93cyBUeXBlRXJyb3IgaW4gY2FzZSBvZiBub24tb2JqZWN0IHRhcmdldC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZU1ldGFkYXRhKGtleTogYW55LCB0YXJnZXQ6IG9iamVjdCwgcHJvcGVydHk6IFByb3BlcnR5S2V5KTogYm9vbGVhbjtcbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShrZXk6IGFueSwgdGFyZ2V0OiBvYmplY3QsIHByb3BlcnR5PzogUHJvcGVydHlLZXkpOiBib29sZWFuIHtcbiAgcmV0dXJuIF9kZWxldGVNZXRhZGF0YShrZXksIHRhcmdldCwgcHJvcGVydHkpO1xufVxuIl19