"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference types="reflect-metadata" />
var isObject_1 = __importDefault(require("lodash/isObject"));
var define_1 = require("./fallback/define");
/* istanbul ignore next */
var builtInReflect = Reflect === null || Reflect === void 0 ? void 0 : Reflect.defineMetadata;
/**
 * Reflect and Fallback differs in a way how metadata is stored. Reflect creates
 * for each object and property separate map to store keys and corresponding
 * metadata. Fallback store metadata directly on the object under special non
 * configurable property. Fallback have limitation to define metadata at
 * non-object target.
 */
var _defineMetadata = builtInReflect !== null && builtInReflect !== void 0 ? builtInReflect : function defineMetadataFk(key, value, target, property) {
    // Verify whether target is object.
    if (isObject_1.default(target))
        // Define metadata associated with target or property.
        define_1.defineInStorage(key, value, target, property);
    else
        throw new TypeError('Metadata can be defined only on the object');
};
function defineMetadata(key, value, target, property) {
    _defineMetadata(key, value, target, property);
}
exports.defineMetadata = defineMetadata;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaW5lTWV0YWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcmVmbGVjdC9kZWZpbmVNZXRhZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDBDQUEwQztBQUMxQyw2REFBdUM7QUFDdkMsNENBQW9EO0FBRXBELDBCQUEwQjtBQUMxQixJQUFNLGNBQWMsR0FBUSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsY0FBYyxDQUFDO0FBRXBEOzs7Ozs7R0FNRztBQUNILElBQU0sZUFBZSxHQUNuQixjQUFjLGFBQWQsY0FBYyxjQUFkLGNBQWMsR0FDZCxTQUFTLGdCQUFnQixDQUFDLEdBQVEsRUFBRSxLQUFVLEVBQUUsTUFBYyxFQUFFLFFBQXNCO0lBQ3BGLG1DQUFtQztJQUNuQyxJQUFJLGtCQUFRLENBQUMsTUFBTSxDQUFDO1FBQ2xCLHNEQUFzRDtRQUN0RCx3QkFBZSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDOztRQUMzQyxNQUFNLElBQUksU0FBUyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7QUFDekUsQ0FBQyxDQUFDO0FBc0JKLFNBQWdCLGNBQWMsQ0FBQyxHQUFRLEVBQUUsS0FBVSxFQUFFLE1BQWMsRUFBRSxRQUFzQjtJQUN6RixlQUFlLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDaEQsQ0FBQztBQUZELHdDQUVDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJyZWZsZWN0LW1ldGFkYXRhXCIgLz5cbmltcG9ydCBpc09iamVjdCBmcm9tICdsb2Rhc2gvaXNPYmplY3QnO1xuaW1wb3J0IHsgZGVmaW5lSW5TdG9yYWdlIH0gZnJvbSAnLi9mYWxsYmFjay9kZWZpbmUnO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuY29uc3QgYnVpbHRJblJlZmxlY3Q6IGFueSA9IFJlZmxlY3Q/LmRlZmluZU1ldGFkYXRhO1xuXG4vKipcbiAqIFJlZmxlY3QgYW5kIEZhbGxiYWNrIGRpZmZlcnMgaW4gYSB3YXkgaG93IG1ldGFkYXRhIGlzIHN0b3JlZC4gUmVmbGVjdCBjcmVhdGVzXG4gKiBmb3IgZWFjaCBvYmplY3QgYW5kIHByb3BlcnR5IHNlcGFyYXRlIG1hcCB0byBzdG9yZSBrZXlzIGFuZCBjb3JyZXNwb25kaW5nXG4gKiBtZXRhZGF0YS4gRmFsbGJhY2sgc3RvcmUgbWV0YWRhdGEgZGlyZWN0bHkgb24gdGhlIG9iamVjdCB1bmRlciBzcGVjaWFsIG5vblxuICogY29uZmlndXJhYmxlIHByb3BlcnR5LiBGYWxsYmFjayBoYXZlIGxpbWl0YXRpb24gdG8gZGVmaW5lIG1ldGFkYXRhIGF0XG4gKiBub24tb2JqZWN0IHRhcmdldC5cbiAqL1xuY29uc3QgX2RlZmluZU1ldGFkYXRhOiAoa2V5OiBhbnksIHZhbHVlOiBhbnksIHRhcmdldDogb2JqZWN0LCBwcm9wZXJ0eT86IFByb3BlcnR5S2V5KSA9PiB2b2lkID1cbiAgYnVpbHRJblJlZmxlY3QgPz9cbiAgZnVuY3Rpb24gZGVmaW5lTWV0YWRhdGFGayhrZXk6IGFueSwgdmFsdWU6IGFueSwgdGFyZ2V0OiBvYmplY3QsIHByb3BlcnR5PzogUHJvcGVydHlLZXkpOiB2b2lkIHtcbiAgICAvLyBWZXJpZnkgd2hldGhlciB0YXJnZXQgaXMgb2JqZWN0LlxuICAgIGlmIChpc09iamVjdCh0YXJnZXQpKVxuICAgICAgLy8gRGVmaW5lIG1ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCB0YXJnZXQgb3IgcHJvcGVydHkuXG4gICAgICBkZWZpbmVJblN0b3JhZ2Uoa2V5LCB2YWx1ZSwgdGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgZWxzZSB0aHJvdyBuZXcgVHlwZUVycm9yKCdNZXRhZGF0YSBjYW4gYmUgZGVmaW5lZCBvbmx5IG9uIHRoZSBvYmplY3QnKTtcbiAgfTtcblxuLyoqXG4gKiBEZWZpbmUgdGhlIG1ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCBvYmplY3QuXG4gKlxuICogQHBhcmFtIGtleSBLZXkgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgbWV0YWRhdGEuXG4gKiBAcGFyYW0gdmFsdWUgVmFsdWUgd2hpY2ggY29udGFpbnMgbWV0YWRhdGEuXG4gKiBAcGFyYW0gdGFyZ2V0IE9iamVjdCB0byBiZSBhc3NvY2lhdGVkIHdpdGggbWV0YWRhdGEuXG4gKiBAdGhyb3dzIFR5cGVFcnJvciBpbiBjYXNlIG9mIG5vbi1vYmplY3QgdGFyZ2V0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lTWV0YWRhdGEoa2V5OiBhbnksIHZhbHVlOiBhbnksIHRhcmdldDogb2JqZWN0KTogdm9pZDtcblxuLyoqXG4gKiBEZWZpbmUgdGhlIG1ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ga2V5IEtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cbiAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB3aGljaCBjb250YWlucyBtZXRhZGF0YS5cbiAqIEBwYXJhbSB0YXJnZXQgT2JqZWN0IHdoaWNoIGNvbnRhaW5zIHByb3BlcnR5LlxuICogQHBhcmFtIHByb3BlcnR5IFByb3BlcnR5IHRvIGJlIGFzc29jaWF0ZWQgd2l0aCBtZXRhZGF0YS5cbiAqIEB0aHJvd3MgVHlwZUVycm9yIGluIGNhc2Ugb2Ygbm9uLW9iamVjdCB0YXJnZXQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShrZXk6IGFueSwgdmFsdWU6IGFueSwgdGFyZ2V0OiBvYmplY3QsIHByb3BlcnR5OiBQcm9wZXJ0eUtleSk6IHZvaWQ7XG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lTWV0YWRhdGEoa2V5OiBhbnksIHZhbHVlOiBhbnksIHRhcmdldDogb2JqZWN0LCBwcm9wZXJ0eT86IFByb3BlcnR5S2V5KTogdm9pZCB7XG4gIF9kZWZpbmVNZXRhZGF0YShrZXksIHZhbHVlLCB0YXJnZXQsIHByb3BlcnR5KTtcbn1cbiJdfQ==