"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isFunction_1 = __importDefault(require("lodash/isFunction"));
var global_1 = require("./global");
/**
 * Get unique identifier of the decorator.
 */
function getDecoratorId() {
    return 'decorize:@cache';
}
exports.getDecoratorId = getDecoratorId;
/**
 * Check the expiration of the cache.
 *
 * @param target Class (prototype).
 * @param property Property name.
 * @param cacheKey Cache key.
 * @param cacheConfig Configuration.
 */
function checkExpiration(target, property, cacheKey, cacheConfig) {
    // In case maxAge specified need to check the expiration.
    if ((cacheConfig === null || cacheConfig === void 0 ? void 0 : cacheConfig.maxAge) >= 0 && global_1.Global.has(target, property, cacheKey))
        if (global_1.Global.get(target, property, cacheKey).timestamp + cacheConfig.maxAge <= Date.now())
            global_1.Global.remove(target, property, cacheKey);
    // In case manual logic specified need to check the expiration.
    if (isFunction_1.default(cacheConfig === null || cacheConfig === void 0 ? void 0 : cacheConfig.expire) && global_1.Global.has(target, property, cacheKey))
        if (cacheConfig.expire.call(target, global_1.Global.get(target, property, cacheKey), target))
            global_1.Global.remove(target, property, cacheKey);
}
exports.checkExpiration = checkExpiration;
/**
 * Throw error in case the decorator used incorrectly.
 */
function throwIncorrectUsage() {
    throw new Error(getDecoratorId() + " must be applied to method or getter");
}
exports.throwIncorrectUsage = throwIncorrectUsage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvY2FjaGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxpRUFBMkM7QUFDM0MsbUNBQWtDO0FBR2xDOztHQUVHO0FBQ0gsU0FBZ0IsY0FBYztJQUM1QixPQUFPLGlCQUFpQixDQUFDO0FBQzNCLENBQUM7QUFGRCx3Q0FFQztBQTBDRDs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0IsZUFBZSxDQUFDLE1BQWMsRUFBRSxRQUFxQixFQUFFLFFBQWEsRUFBRSxXQUF3QjtJQUM1Ryx5REFBeUQ7SUFDekQsSUFBSSxDQUFBLFdBQVcsYUFBWCxXQUFXLHVCQUFYLFdBQVcsQ0FBRSxNQUFNLEtBQUksQ0FBQyxJQUFJLGVBQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUM7UUFDcEUsSUFBSSxlQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNyRixlQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFOUMsK0RBQStEO0lBQy9ELElBQUksb0JBQVUsQ0FBQyxXQUFXLGFBQVgsV0FBVyx1QkFBWCxXQUFXLENBQUUsTUFBTSxDQUFDLElBQUksZUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQztRQUMzRSxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxlQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLEVBQUUsTUFBTSxDQUFDO1lBQ2pGLGVBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBVkQsMENBVUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLG1CQUFtQjtJQUNqQyxNQUFNLElBQUksS0FBSyxDQUFJLGNBQWMsRUFBRSx5Q0FBc0MsQ0FBQyxDQUFDO0FBQzdFLENBQUM7QUFGRCxrREFFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJ2xvZGFzaC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IEdsb2JhbCB9IGZyb20gJy4vZ2xvYmFsJztcbmltcG9ydCB7IFJlc29sdmVyIH0gZnJvbSAnLi9yZXNvbHZlcic7XG5cbi8qKlxuICogR2V0IHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBkZWNvcmF0b3IuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWNvcmF0b3JJZCgpOiBzdHJpbmcge1xuICByZXR1cm4gJ2RlY29yaXplOkBjYWNoZSc7XG59XG5cbi8qKlxuICogU3RydWN0dXJlIG9mIHRoZSBjYWNoZSBjb25maWcuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2FjaGVDb25maWcge1xuICAvKipcbiAgICogTWF4IGFnZSAobXMpLlxuICAgKi9cbiAgbWF4QWdlPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUga2V5IGJhc2VkIG9uIHRoZSBhcmdzLlxuICAgKi9cbiAgcmVzb2x2ZXI/OiBSZXNvbHZlcjtcblxuICAvKipcbiAgICogTWFudWFsIGxvZ2ljIHRvIGV4cGlyZSB0aGUgY2FjaGUuXG4gICAqL1xuICBleHBpcmU/OiAoZW50cnk6IENhY2hlRW50cnksIGNvbnRleHQ6IGFueSkgPT4gYm9vbGVhbiB8IHZvaWQ7XG59XG5cbi8qKlxuICogU3RydWN0dXJlIG9mIHRoZSBjYWNoZSBlbnRyeS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDYWNoZUVudHJ5IHtcbiAgLyoqXG4gICAqIFJlc3VsdC5cbiAgICovXG4gIHZhbHVlOiBhbnk7XG5cbiAgLyoqXG4gICAqIE1heCBhZ2UgKG1zKS5cbiAgICovXG4gIG1heEFnZT86IG51bWJlcjtcblxuICAvKipcbiAgICogVGltZXN0YW1wIHdoZW4gZW50cnkgaXMgYWRkZWQgKG1zKS5cbiAgICovXG4gIHRpbWVzdGFtcDogbnVtYmVyO1xufVxuXG4vKipcbiAqIENoZWNrIHRoZSBleHBpcmF0aW9uIG9mIHRoZSBjYWNoZS5cbiAqXG4gKiBAcGFyYW0gdGFyZ2V0IENsYXNzIChwcm90b3R5cGUpLlxuICogQHBhcmFtIHByb3BlcnR5IFByb3BlcnR5IG5hbWUuXG4gKiBAcGFyYW0gY2FjaGVLZXkgQ2FjaGUga2V5LlxuICogQHBhcmFtIGNhY2hlQ29uZmlnIENvbmZpZ3VyYXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0V4cGlyYXRpb24odGFyZ2V0OiBvYmplY3QsIHByb3BlcnR5OiBQcm9wZXJ0eUtleSwgY2FjaGVLZXk6IGFueSwgY2FjaGVDb25maWc6IENhY2hlQ29uZmlnKTogdm9pZCB7XG4gIC8vIEluIGNhc2UgbWF4QWdlIHNwZWNpZmllZCBuZWVkIHRvIGNoZWNrIHRoZSBleHBpcmF0aW9uLlxuICBpZiAoY2FjaGVDb25maWc/Lm1heEFnZSA+PSAwICYmIEdsb2JhbC5oYXModGFyZ2V0LCBwcm9wZXJ0eSwgY2FjaGVLZXkpKVxuICAgIGlmIChHbG9iYWwuZ2V0KHRhcmdldCwgcHJvcGVydHksIGNhY2hlS2V5KS50aW1lc3RhbXAgKyBjYWNoZUNvbmZpZy5tYXhBZ2UgPD0gRGF0ZS5ub3coKSlcbiAgICAgIEdsb2JhbC5yZW1vdmUodGFyZ2V0LCBwcm9wZXJ0eSwgY2FjaGVLZXkpO1xuXG4gIC8vIEluIGNhc2UgbWFudWFsIGxvZ2ljIHNwZWNpZmllZCBuZWVkIHRvIGNoZWNrIHRoZSBleHBpcmF0aW9uLlxuICBpZiAoaXNGdW5jdGlvbihjYWNoZUNvbmZpZz8uZXhwaXJlKSAmJiBHbG9iYWwuaGFzKHRhcmdldCwgcHJvcGVydHksIGNhY2hlS2V5KSlcbiAgICBpZiAoY2FjaGVDb25maWcuZXhwaXJlLmNhbGwodGFyZ2V0LCBHbG9iYWwuZ2V0KHRhcmdldCwgcHJvcGVydHksIGNhY2hlS2V5KSwgdGFyZ2V0KSlcbiAgICAgIEdsb2JhbC5yZW1vdmUodGFyZ2V0LCBwcm9wZXJ0eSwgY2FjaGVLZXkpO1xufVxuXG4vKipcbiAqIFRocm93IGVycm9yIGluIGNhc2UgdGhlIGRlY29yYXRvciB1c2VkIGluY29ycmVjdGx5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGhyb3dJbmNvcnJlY3RVc2FnZSgpOiBuZXZlciB7XG4gIHRocm93IG5ldyBFcnJvcihgJHtnZXREZWNvcmF0b3JJZCgpfSBtdXN0IGJlIGFwcGxpZWQgdG8gbWV0aG9kIG9yIGdldHRlcmApO1xufVxuIl19